version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@0.4.0
  slack: circleci/slack@4.4.2 # ref: https://github.com/CircleCI-Public/slack-orb, https://circleci.com/developer/orbs/orb/circleci/slack#usage-examples

jobs:
  test:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache: # ref: https://circleci.com/docs/2.0/caching/#restoring-cache
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}

      - run: npm ci

      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run: npm run lint

      - run:
          name: Jest Tests
          command: npm run test

  build-and-push-image:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
      env:
        type: string
        default: "development"
      issuer_server_url:
        type: string
      verifier_server_url:
        type: string
        default: "https://acme-verifier-api.demo.dev-unumid.co"
      issuer_did:
        type: string
        default: "did:unum:6ff79cd5-3088-4d69-82b4-4e0b7bbcf3b2"
      log_rocket_id:
        type: string
        default: "vm6x8i/acme-verifier-client-dev"
      holder_app_uuid:
        type: string
      image_tag:
        type: string

    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - add_ssh_keys:
          fingerprints:
            - "ae:c4:5c:af:ef:ea:57:12:99:a3:bb:aa:09:e0:57:14"
      - run:
          name: Update container image
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" --build-arg API_KEY=${DEV_API_KEY} --build-arg ISSUER_SERVER_URL=<< parameters.issuer_server_url >> --build-arg ENV=<< parameters.env >> --build-arg VERIFIER_SERVER_URL=<< parameters.verifier_server_url >> --build-arg ISSUER_DID=<< parameters.issuer_did >> --build-arg LOG_ROCKET_ID=<< parameters.log_rocket_id >> --build-arg HOLDER_APP_UUID=<< parameters.holder_app_uuid >> -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag >>
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker push << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag >>

  build-and-push-image-sandbox:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
      env:
        type: string
        default: "sandbox"
      issuer_server_url:
        type: string
      verifier_server_url:
        type: string
        default: "https://acme-verifier-api.demo.sandbox-unumid.co"
      issuer_did:
        type: string
        default: "did:unum:94f9fc51-1098-4c98-92a1-ba4bbf5aafb6"
      log_rocket_id:
        type: string
        default: "vm6x8i/acme-verifier-client-sandbox"
      holder_app_uuid:
        type: string
      image_tag:
        type: string

    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - add_ssh_keys:
          fingerprints:
            - "ae:c4:5c:af:ef:ea:57:12:99:a3:bb:aa:09:e0:57:14"
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" --build-arg API_KEY=${SANDBOX_API_KEY} --build-arg ISSUER_SERVER_URL=<< parameters.issuer_server_url >> --build-arg ENV=<< parameters.env >> --build-arg VERIFIER_SERVER_URL=<< parameters.verifier_server_url >> --build-arg ISSUER_DID=<< parameters.issuer_did >> --build-arg LOG_ROCKET_ID=<< parameters.log_rocket_id >> --build-arg HOLDER_APP_UUID=<< parameters.holder_app_uuid >> -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:sandbox-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}"
            docker push << parameters.reg >>/<< parameters.repo >>:sandbox-latest
          name: Update container image

  deploy-image:
    docker: # Referencing the python image here, see https://github.com/CircleCI-Public/aws-eks-orb/issues/52#issuecomment-1006838213
    - image: cimg/python:3.10
    parameters:
      cluster-name:
        type: string
        default: "dev-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      image_tag:
        type: string

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            # Set the image tag then ensure a rollout is triggered. Thanks to the deployment pod spec being set to always pull this should grab the latest image, even with the same tag.
            # ref: https://stackoverflow.com/a/55914480/2631728
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:<< parameters.image_tag >>
            kubectl rollout restart deploy << parameters.deployment >>

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
          name: Deploy container image to dev
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  deploy-image-sandbox:
    docker: # Referencing the python image here, see https://github.com/CircleCI-Public/aws-eks-orb/issues/52#issuecomment-1006838213
    - image: cimg/python:3.10
    parameters:
      cluster-name:
        type: string
        default: "sandbox-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      namespace:
        type: string
        default: "default"
      image_tag:
        type: string

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}" -n << parameters.namespace >>

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >> -n << parameters.namespace >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
          name: Deploy container image to sandbox
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - main
                - test-circleci
                - sandbox

  build-and-deploy-release:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # ACME Holder
      - build-and-push-image-sandbox:
          requires:
            - test
          context: AWS-Dev
          repo: acme-demo-client
          holder_app_uuid: f1e5393d-1b69-4c5c-bc5b-5ad161c8c084
          issuer_server_url: https://issuer-api.demo.sandbox-unumid.co
          image_tag: sandbox-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-image-sandbox:
          context: 
            - AWS-Dev
            - Slack-Context
          requires:
            - build-and-push-image-sandbox
          repo: acme-demo-client
          deployment: acme-demo-client
          image_tag: sandbox-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # Unum Holder
      - build-and-push-image-sandbox:
          name: "build-and-push-unum-image-sandbox"
          requires:
            - test
          context: AWS-Dev
          repo: acme-unum-demo-client
          holder_app_uuid: b8820ef7-8ae8-4fa9-9a99-84629b2ea147
          issuer_server_url: https://unum-issuer-api.demo.sandbox-unumid.co
          issuer_did: did:unum:5bf8de02-df74-484b-aa4f-4ee48c4ddd7c
          image_tag: sandbox-unum-latest
          log_rocket_id: vm6x8i/acme-unum-client-sandbox
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-image-sandbox:
          name: "deploy-unum-image-sandbox"
          context: 
            - AWS-Dev
            - Slack-Context
          requires:
            - build-and-push-unum-image-sandbox
          repo: acme-unum-demo-client
          deployment: acme-unum-demo-client
          image_tag: sandbox-unum-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main

      # ACME Holder
      - build-and-push-image:
          requires:
            - test
          context: AWS-Dev
          repo: acme-demo-client
          holder_app_uuid: 91514d8e-b5b2-41d9-9744-3cbb2bb9a85d
          issuer_server_url: https://issuer-api.demo.dev-unumid.co
          image_tag: dev-latest
          filters:
            branches:
              only:
                - main
      - deploy-image:
          context: 
            - AWS-Dev
            - Slack-Context
          repo: acme-demo-client
          deployment: acme-demo-client
          image_tag: dev-latest
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - main
      
      # Unum Holder
      - build-and-push-image:
          name: "build-and-push-unum-image"
          requires:
            - test
          context: AWS-Dev
          repo: acme-unum-demo-client
          holder_app_uuid: 86810c13-47b4-4a2b-ae46-fb13b6a5177a
          issuer_server_url: https://unum-issuer-api.demo.dev-unumid.co
          issuer_did: did:unum:79976e0a-d878-484a-a476-924f003d31b3
          image_tag: dev-unum-latest
          log_rocket_id: vm6x8i/acme-unum-client-dev
          filters:
            branches:
              only:
                - main
      - deploy-image:
          name: "deploy-unum-image"
          context: 
            - AWS-Dev
            - Slack-Context
          repo: acme-unum-demo-client
          deployment: acme-unum-demo-client
          image_tag: dev-unum-latest
          requires:
            - build-and-push-unum-image
          filters:
            branches:
              only:
                - main

  build-and-deploy-test:
    jobs:
      - test:
          filters:
            branches:
              only:
                - test-circleci

      # ACME Holder
      - build-and-push-image:
          name: build-and-push-image-test
          requires:
            - test
          context: AWS-Dev
          repo: acme-demo-client
          holder_app_uuid: 91514d8e-b5b2-41d9-9744-3cbb2bb9a85d
          issuer_server_url: https://issuer-api.demo.dev-unumid.co
          image_tag: test-latest
          filters:
            branches:
              only:
                - test-circleci
      - deploy-image:
          context: 
            - AWS-Dev
            - Slack-Context
          repo: acme-demo-client
          deployment: acme-demo-client
          image_tag: test-latest
          requires:
            - build-and-push-image-test
          filters:
            branches:
              only:
                - test-circleci

      # Unum Holder
      - build-and-push-image:
          name: "build-and-push-unum-image-test"
          requires:
            - test
          context: AWS-Dev
          repo: acme-unum-demo-client
          holder_app_uuid: 86810c13-47b4-4a2b-ae46-fb13b6a5177a
          issuer_server_url: https://unum-issuer-api.demo.dev-unumid.co
          image_tag: test-unum-latest
          log_rocket_id: vm6x8i/acme-unum-client-dev
          issuer_did: did:unum:79976e0a-d878-484a-a476-924f003d31b3
          filters:
            branches:
              only:
                - test-circleci
      - deploy-image:
          name: "deploy-unum-image-test"
          context: 
            - AWS-Dev
            - Slack-Context
          repo: acme-unum-demo-client
          deployment: acme-unum-demo-client
          image_tag: test-unum-latest
          requires:
            - build-and-push-unum-image-test
          filters:
            branches:
              only:
                - test-circleci
